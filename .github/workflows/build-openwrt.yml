#=================================================
# https://github.com/tete1030/openwrt-fastbuild-actions
# Description: FAST building OpenWrt with Github Actions and Docker!
# Lisence: MIT
# Author: Texot
#=================================================

env:
  # DO NOT CHANGE the following here, set them only in forked repo's Settings->Secrets page
  # You don't need to set docker_registry if you are using the default Docker Hub
  # 安全起见以下参数请不要在此更改，在你Fork的repo中，Settings->Secrets页面更改
  # 如果你想使用默认的Docker Hub，你不需要在secrets页面设置docker_registry
  DK_REGISTRY: ${{secrets.docker_registry}}
  DK_USERNAME: ${{secrets.docker_username}}
  DK_PASSWORD: ${{secrets.docker_password}}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
  TMATE_ENCRYPT_PASSWORD: ${{secrets.TMATE_ENCRYPT_PASSWORD}}

name: Build OpenWrt

on:
  deployment:
  repository_dispatch:
  push:
    paths:
    - 'user/**'
  ## If you want to use 'watch', 'schedule' events, make sure you also have changed the jobs' `if` condition.
  ## For 'schedule', see examples in: https://crontab.guru/examples.html
  ##     e.g. every sunday midnight: '0 0 * * 0' every midnight: '0 0 * * *'
  # schedule:
  #   - cron: '0 0 * * 0'
  # watch:
  #   types: [started]

jobs:
  build:
    runs-on: ubuntu-18.04
    # Always activate this job
    # * You can change Line 3 to the following one to only build when push with '#build#'
    #     && contains(github.event.head_commit.message, '#build#')
    # * To build on schedule event, add OR condition:
    #     github.event_name == 'schedule'
    # * To build when YOU stars YOUR OWN project, add OR condition:
    #     github.event_name == 'watch' && github.event.action == 'started' && github.event.repository.owner.id == github.event.sender.id
    # For `github.event` structures, see: https://developer.github.com/v3/activity/events/types/
    if: |
      github.event_name == 'push'
      || github.event_name == 'repository_dispatch'
      || github.event_name == 'deployment'
    name: ${{matrix.title}} ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        mode: [normal, test]
        target: [x86_64, wdr4310v1]
        include:
        - mode: normal
          title: Build
        - mode: test
          title: Fast check
    env:
      GITHUB_CONTEXT: ${{toJSON(github)}}
      MATRIX_CONTEXT: ${{toJSON(matrix)}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Init build env
      env:
        BUILD_OPTS: 'update_feeds update_repo rebase rebuild debug push_when_fail package_only'
      run: scripts/host/init_runner.sh

    - name: Check if skip this job
      run: scripts/host/check_target.sh

    - name: Clean up for extra space
      if: env.SKIP_TARGET == '0' && env.TEST != '1'
      run: scripts/host/cleanup.sh

    - name: Set up Docker Buildx
      id: buildx
      if: env.SKIP_TARGET == '0'
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      if: env.SKIP_TARGET == '0'
      run: |
        . scripts/host/docker.sh
        configure_docker
        login_to_registry

    - name: Check status of builders
      if: env.SKIP_TARGET == '0'
      run: |
        . scripts/host/docker.sh
        if [ "x${OPT_REBUILD}" != "x1" ]; then
          # temporarily disable failure guarder
          set +eo pipefail
            docker buildx imagetools inspect "${BUILDER_ID_INC}" 2>&1 >/dev/null
            builder_inc_ret_val=$?
          set -eo pipefail

          if [ "x${OPT_REBASE}" = "x1" -o "x${builder_inc_ret_val}" != "x0" ]; then
            set +eo pipefail
              docker buildx imagetools inspect "${BUILDER_ID_BASE}" 2>&1 >/dev/null
              builder_base_ret_val=$?
            set -eo pipefail
            if [ "x${builder_base_ret_val}" != "x0" ]; then
              echo "Base builder '${BUILDER_ID_BASE}' does not exist, creating one"
              OPT_REBUILD=1
            else
              echo "Creating incremental builder '${BUILDER_ID_INC}' from base builder '${BUILDER_ID_BASE}'"
              create_remote_tag_alias "${BUILDER_ID_BASE}" "${BUILDER_ID_INC}"
            fi
          fi
        fi

        if [ "x${OPT_REBUILD}" = "x1" ]; then
          echo "Re-creating base builder '${BUILDER_ID_BASE}'"
        fi
        echo "::set-env name=OPT_REBUILD::${OPT_REBUILD}"

    - name: '[Debug] Wait for SSH connection (timeout 5min)'
      if: env.SKIP_TARGET == '0' && env.OPT_DEBUG == '1' && env.TEST != '1'
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@dev

    - name: Get builder
      if: env.SKIP_TARGET == '0'
      run: |
        . scripts/host/docker.sh
        BUILDER_CONTAINER_ID="builder"
        echo "::set-env name=BUILDER_CONTAINER_ID::${BUILDER_CONTAINER_ID}"
        mkdir openwrt_bin
        chmod 777 openwrt_bin
        MOUNT=( -v "$(pwd)/scripts:/home/builder/scripts" -v "$(pwd)/user:/home/builder/user" -v "$(pwd)/openwrt_bin:/home/builder/openwrt_bin" )
        if [ "x${OPT_REBUILD}" != "x1" ]; then
          pull_image "${BUILDER_ID_INC}"
          squash_image_when_necessary "${BUILDER_ID_INC}"
          docker run -d -t --name "${BUILDER_CONTAINER_ID}" "${MOUNT[@]}" "${BUILDER_ID_INC}"
        else
          docker run -d -t --name "${BUILDER_CONTAINER_ID}" "${MOUNT[@]}" tete1030/openwrt-buildenv:latest
        fi
        docker_exec "${BUILDER_CONTAINER_ID}" scripts/init_env.sh

    - name: Clone/update source codes
      if: env.SKIP_TARGET == '0'
      run: |
        . scripts/host/docker.sh
        docker_exec -e REPO_URL="${REPO_URL}" -e REPO_BRANCH="${REPO_BRANCH}" -e OPT_UPDATE_REPO=${OPT_UPDATE_REPO} "${BUILDER_CONTAINER_ID}" scripts/update_repo.sh
        docker_exec -e OPT_UPDATE_FEEDS=${OPT_UPDATE_FEEDS} "${BUILDER_CONTAINER_ID}" scripts/update_feeds.sh

    # Allow intermediate customization
    - name: '[Debug] Wait for SSH connection (timeout 30min)'
      if: env.SKIP_TARGET == '0' && env.OPT_DEBUG == '1' && env.TEST != '1'
      env:
        TMATE_DOCKER_CONTAINER: ${{env.BUILDER_CONTAINER_ID}}
      uses: tete1030/debugger-action@dev

    - name: Apply customizations
      if: env.SKIP_TARGET == '0'
      run: |
        . scripts/host/docker.sh
        docker_exec "${BUILDER_CONTAINER_ID}" scripts/customize.sh

    - name: Download packages
      if: env.SKIP_TARGET == '0'
      run: |
        . scripts/host/docker.sh
        docker_exec "${BUILDER_CONTAINER_ID}" scripts/download.sh

    - name: Print disk space
      if: env.SKIP_TARGET == '0'
      run: df -h

    - name: Compile firmware and packages with multiple threads
      id: mtcompile
      if: env.SKIP_TARGET == '0'
      continue-on-error: true
      run: |
        echo "::set-output name=started::1"
        . scripts/host/docker.sh
        docker_exec -e MODE=m -e OPT_PACKAGE_ONLY="${OPT_PACKAGE_ONLY}" "${BUILDER_CONTAINER_ID}" scripts/compile.sh
        echo "::set-output name=status::success"

    - name: Compile firmware and packages with single threads when failed
      if: env.SKIP_TARGET == '0' && steps.mtcompile.outputs.started == '1' && steps.mtcompile.outputs.status != 'success'
      run: |
        . scripts/host/docker.sh
        docker_exec -e MODE=s -e OPT_PACKAGE_ONLY="${OPT_PACKAGE_ONLY}" "${BUILDER_CONTAINER_ID}" scripts/compile.sh

    - name: Print disk space
      if: env.SKIP_TARGET == '0'
      run: df -h

    # failure checking
    - name: '[Failure/Debug] Wait for SSH connection (timeout 30min)'
      if: |
        env.SKIP_TARGET == '0' && !cancelled()
        && (job.status == 'failure' || (env.OPT_DEBUG == '1' && env.TEST != '1'))
      env:
        TMATE_DOCKER_CONTAINER: ${{env.BUILDER_CONTAINER_ID}}
      uses: tete1030/debugger-action@dev

    - name: Upload current builder
      if: |
        env.SKIP_TARGET == '0' && !cancelled() && (
          job.status == 'success'
          || env.OPT_PUSH_WHEN_FAIL == '1'
        )
      run: |
        . scripts/host/docker.sh
        docker commit -a "tete1030/openwrt-fastbuild-actions" -m "Building at $(date)" "${BUILDER_CONTAINER_ID}" "${BUILDER_ID_INC}"
        docker container rm -fv "${BUILDER_CONTAINER_ID}"
        docker container prune -f
        docker system prune -f --volumes
        if [ "x${OPT_REBUILD}" != '1' ]; then
          squash_image_when_necessary "${BUILDER_ID_INC}"
        fi
        docker push "${BUILDER_ID_INC}"
        if [ "x${OPT_REBUILD}" = "x1" ]; then
          create_remote_tag_alias "${BUILDER_ID_INC}" "${BUILDER_ID_BASE}"
        fi

    # - name: Upload bin directory
    #   uses: actions/upload-artifact@master
    #   if: env.SKIP_TARGET == '0' && !cancelled()
    #   with:
    #     name: OpenWrt_bin
    #     path: openwrt_bin

    - name: Organize files
      id: organize
      if: env.SKIP_TARGET == '0' && !cancelled()
      run: |
        shopt -s extglob
        sudo chown -R $(id -u):$(id -g) openwrt_bin
        if [ "x${OPT_PACKAGE_ONLY}" != "x1" ]; then
          mkdir "$(pwd)/openwrt_firmware"
          cd openwrt_bin/targets/*/*
          all_firmware_files=( !(packages) )
          [ ${#all_firmware_files[@]} -gt 0 ] && mv "${all_firmware_files[@]}" ../../../../openwrt_firmware/ || true
        fi
        echo "::set-output name=status::success"

    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: env.SKIP_TARGET == '0' && env.OPT_PACKAGE_ONLY != '1' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: openwrt_firmware

    - name: Upload packages
      uses: actions/upload-artifact@master
      if: env.SKIP_TARGET == '0' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_packages
        path: openwrt_bin

    # failure checking
    - name: '[Failure/Debug] wait for SSH connection (timeout 30min. You are safe to cancel the job now.)'
      if: |
        env.SKIP_TARGET == '0' && !cancelled()
        && (job.status == 'failure' || (env.OPT_DEBUG == '1' && env.TEST != '1'))
      uses: tete1030/debugger-action@dev
