#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX (for direct-build job)
# Blog: https://p3terx.com
#=================================================

#=================================================
# https://github.com/tete1030/openwrt-fastbuild-actions
# Description: FAST building OpenWrt with Github Actions and Docker!
# Lisence: MIT
# Author: Texot (for docker-* jobs)
#=================================================

# If you want to tweak the options, please be sure you understand them.
# 如果你想更改参数，确保在理解它们的前提下进行
env:
  # Specify here the name and tag you want to use for the builders
  # 在这里自定义你想使用的Builder名和默认Tag
  BUILDER_NAME: openwrt_dev
  BUILDER_TAG: latest
  # Specify here the OpenWrt Repo URL and Branch
  # 在这里指定你的OpenWrt的Repo URL和Branch
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  # REPO_URL: https://github.com/openwrt/openwrt
  # REPO_BRANCH: openwrt-19.07
  # Specify here your config file
  # 在这里指定你的配置文件名
  CONFIG_FILE: 'config.diff'
  # Leave it empty if you are using the default Docker Hub
  # 如果你想使用默认的Docker Hub，此处留空
  DK_REGISTRY: ''
  # DO NOT CHANGE the following here, set them only in forked repo's Settings->Secrets page
  # 安全起见以下参数请不要在此更改，在你Fork的repo中，Settings->Secrets页面更改
  DK_USERNAME: ${{secrets.docker_username}}
  DK_PASSWORD: ${{secrets.docker_password}}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
  # Not recommended to change unless you understand how it is used
  # 以下参数不推荐修改
  DK_BUILDX_DRIVER: docker
  DK_CONTEXT: .
  NO_REMOTE_CACHE: 1
  NO_BUILDTIME_PUSH: 1

name: Build OpenWrt

on:
  deployment:
  repository_dispatch:
  push:
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: [started]

jobs:
  context:
    name: Print runner context (for debugging)
    runs-on: ubuntu-18.04
    steps:
    - name: Dump github context
      run: |
        cat << 'EOF'
        ${{toJSON(github)}}
        EOF

  docker-build:
    runs-on: ubuntu-18.04
    if: |
      (
        github.event_name == 'push' &&
        contains(github.event.head_commit.message, '#build#')
      ) || (
        github.event_name == 'repository_dispatch' && 
        github.event.action == 'docker-build'
      ) || (
        github.event_name == 'deployment' && 
        github.event.deployment.task == 'docker-build'
      )
    name: ${{matrix.title}}
    strategy:
      fail-fast: true
      matrix: 
        mode: [normal, test]
        include:
        - mode: normal
          title: docker-build
        - mode: test
          title: Fast checking docker-build
    env:
      # Not recommended to change as they are already in optimal condition
      # 不推荐修改，已处在最优状态
      DK_DOCKERFILE: Dockerfile
      BUILD_ARGS: 'REPO_URL REPO_BRANCH CONFIG_FILE'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Init test env
      if: matrix.mode == 'test'
      run: |
        echo "::set-env name=DK_DOCKERFILE::tests/${DK_DOCKERFILE}"
        echo "::set-env name=BUILDER_TAG::test-${BUILDER_TAG}"
        echo "::set-env name=TEST::1"

    - name: Init build env
      run: |
        echo "::set-env name=IMAGE_NAME::${DK_USERNAME}/${BUILDER_NAME}"
        echo "::set-env name=IMAGE_TAG::${BUILDER_TAG}"
        echo "::set-env name=DK_DOCKERFILE::Dockerfiles/${DK_DOCKERFILE}"
        scripts/cleanup.sh

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        . docker.sh
        configure_docker
        login_to_registry

    - name: Initialize environment
      run: |
        . docker.sh
        build_image init-env
        echo "::set-env name=STATE_LAST_BUILD_STAGE::init-env"

    - name: Clone all source code
      run: |
        . docker.sh
        build_image clone
        echo "::set-env name=STATE_LAST_BUILD_STAGE::clone"

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection
      if: github.event.client_payload.debug == true || github.event.deployment.payload.debug == true
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    - name: Load custom configuration
      run: |
        . docker.sh
        build_image custom
        echo "::set-env name=STATE_LAST_BUILD_STAGE::custom"

    - name: Download packages
      run: |
        . docker.sh
        build_image download
        echo "::set-env name=STATE_LAST_BUILD_STAGE::download"

    - name: Print disk space
      run: df -h

    - name: Compile firmware and packages
      run: |
        . docker.sh
        build_image compile
        echo "::set-env name=STATE_LAST_BUILD_STAGE::compile"

    - name: Print disk space
      run: df -h

    - name: Upload current builder
      if: |
        !cancelled() && (
          success() ||
          github.event.client_payload.push_when_fail == true ||
          github.event.deployment.payload.push_when_fail == true
        )
      run: |
        . docker.sh
        push_image_and_cache

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    - name: Failed/debug set, wait for SSH connection ( you are safe to cancel the job now )
      if: |
        failure() ||
        github.event.client_payload.debug == true ||
        github.event.deployment.payload.debug == true
      uses: tete1030/debugger-action@my

  docker-build-inc:
    runs-on: ubuntu-18.04
    if: | 
      (
        github.event_name == 'push' &&
        contains(github.event.head_commit.message, '#build-inc#')
      ) || (
        github.event_name == 'repository_dispatch' && 
        github.event.action == 'docker-build-inc'
      ) || (
        github.event_name == 'deployment' && 
        github.event.deployment.task == 'docker-build-inc'
      )
    name: ${{matrix.title}}
    strategy:
      fail-fast: true
      matrix:
        mode: [normal, test]
        include:
        - mode: normal
          title: docker-build-inc
        - mode: test
          title: Fast checking docker-build-inc
    env:
      # Not recommended to change as they are already in optimal condition
      # 不推荐修改，已处在最优状态
      # Using docker driver instead of docker-container because we don't need cache
      # 由于不需要缓存，这里使用docker而非docker-container
      DK_DOCKERFILE: Dockerfile-inc
      BUILD_ARGS: 'CONFIG_FILE IMAGE_BASE UPDATE_REPO UPDATE_FEEDS'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Init test env
      if: matrix.mode == 'test'
      run: |
        echo "::set-env name=DK_DOCKERFILE::tests/${DK_DOCKERFILE}"
        echo "::set-env name=BUILDER_TAG::test-${BUILDER_TAG}"
        echo "::set-env name=TEST::1"

    - name: Init build env
      run: |
        # set-env command does not export env for current shell
        export IMAGE_NAME="${DK_USERNAME}/${BUILDER_NAME}"
        export IMAGE_TAG=${BUILDER_TAG}-inc
        echo "::set-env name=IMAGE_NAME::${IMAGE_NAME}"
        echo "::set-env name=IMAGE_TAG::${IMAGE_TAG}"
        echo "::set-env name=IMAGE_BASE::${DK_REGISTRY:+$DK_REGISTRY/}${IMAGE_NAME}:${IMAGE_TAG}"
        echo "::set-env name=IMAGE_LATEST::${DK_REGISTRY:+$DK_REGISTRY/}${IMAGE_NAME}:${BUILDER_TAG}"
        echo "::set-env name=DK_DOCKERFILE::Dockerfiles/${DK_DOCKERFILE}"

        UPDATE_FEEDS=0
        [ "x${{ github.event.client_payload.update_feeds || github.event.deployment.payload.update_feeds }}" != "xtrue" ] || UPDATE_FEEDS=1
        echo "::set-env name=UPDATE_FEEDS::${UPDATE_FEEDS}"
        UPDATE_REPO=0
        [ "x${{ github.event.client_payload.update_repo || github.event.deployment.payload.update_repo }}" != "xtrue" ] || UPDATE_REPO=1
        echo "::set-env name=UPDATE_REPO::${UPDATE_REPO}"

        scripts/cleanup.sh

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        . docker.sh
        configure_docker
        login_to_registry

    - name: Check if using latest base builder
      env:
        BOOL_USE_LATEST: ${{ github.event.client_payload.use_latest || github.event.deployment.payload.use_latest }}
      run: |
        . docker.sh
        # temporarily disable failure guarder
        set +eo pipefail
        docker buildx imagetools inspect "${IMAGE_BASE}"
        ret_val=$?
        set -eo pipefail
        if [ "x${BOOL_USE_LATEST}" = "xtrue" -o "x${ret_val}" != "x0" ]; then
          echo "Creating incremental builder '${IMAGE_BASE}' from base builder '${IMAGE_LATEST}'"

          set +eo pipefail
          docker buildx imagetools inspect "${IMAGE_LATEST}"
          ret_val=$?
          set -eo pipefail
          if [ "x${ret_val}" != "x0" ]; then
            echo "::error::Base builder '${IMAGE_LATEST}' does not exist, please run 'docker-build' job" >&2
            exit 1
          fi

          create_remote_tag_alias "${IMAGE_LATEST}" "${IMAGE_BASE}"
        fi

    - name: Download last incremental builder
      run: |
        . docker.sh
        pull_image

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection
      if: github.event.client_payload.debug == true || github.event.deployment.payload.debug == true
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    - name: Update repo and packages
      run: |
        . docker.sh
        build_image updateclone
        echo "::set-env name=STATE_LAST_BUILD_STAGE::updateclone"

    - name: Apply customizations
      run: |
        . docker.sh
        build_image custom
        echo "::set-env name=STATE_LAST_BUILD_STAGE::custom"

    - name: Download packages
      run: |
        . docker.sh
        build_image download
        echo "::set-env name=STATE_LAST_BUILD_STAGE::download"

    - name: Print disk space
      run: df -h

    - name: Compile firmware and packages
      run: |
        . docker.sh
        build_image compile
        echo "::set-env name=STATE_LAST_BUILD_STAGE::compile"

    - name: Print disk space
      run: df -h

    - name: Upload current builder
      if: |
        !cancelled() && (
          success() ||
          github.event.client_payload.push_when_fail == true ||
          github.event.deployment.payload.push_when_fail == true
        )
      run: |
        . docker.sh
        push_image_and_cache

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"
  
    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    - name: Failed/debug set, wait for SSH connection ( you are safe to cancel the job now )
      if: |
        failure() ||
        github.event.client_payload.debug == true ||
        github.event.deployment.payload.debug == true
      uses: tete1030/debugger-action@my

  docker-build-package:
    runs-on: ubuntu-18.04
    if: |
      (
        github.event_name == 'push' &&
        contains(github.event.head_commit.message, '#build-package#')
      ) || (
        github.event_name == 'repository_dispatch' && 
        github.event.action == 'docker-build-package'
      ) || (
        github.event_name == 'deployment' && 
        github.event.deployment.task == 'docker-build-package'
      )
    name: ${{matrix.title}}
    strategy:
      fail-fast: true
      matrix:
        mode: [normal, test]
        include:
        - mode: normal
          title: docker-build-package
        - mode: test
          title: Fast checking docker-build-package
    env:
      # Not recommended to change as they are already in optimal condition
      # 不推荐修改，已处在最优状态
      # Using docker driver instead of docker-container because we don't need cache
      # 由于不需要缓存，这里使用docker而非docker-container
      DK_DOCKERFILE: Dockerfile-package
      BUILD_ARGS: 'CONFIG_FILE IMAGE_BASE UPDATE_FEEDS'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Init test env
      if: matrix.mode == 'test'
      run: |
        echo "::set-env name=DK_DOCKERFILE::tests/${DK_DOCKERFILE}"
        echo "::set-env name=BUILDER_TAG::test-${BUILDER_TAG}"
        echo "::set-env name=TEST::1"

    - name: Init build env
      run: |
        # set-env command does not export env for current shell
        export IMAGE_NAME="${DK_USERNAME}/${BUILDER_NAME}"
        export IMAGE_TAG=${BUILDER_TAG}-package
        echo "::set-env name=IMAGE_NAME::${IMAGE_NAME}"
        echo "::set-env name=IMAGE_TAG::${IMAGE_TAG}"
        echo "::set-env name=IMAGE_BASE::${DK_REGISTRY:+$DK_REGISTRY/}${IMAGE_NAME}:${IMAGE_TAG}"
        echo "::set-env name=IMAGE_LATEST::${DK_REGISTRY:+$DK_REGISTRY/}${IMAGE_NAME}:${BUILDER_TAG}"
        echo "::set-env name=IMAGE_LATEST_INC::${DK_REGISTRY:+$DK_REGISTRY/}${IMAGE_NAME}:${BUILDER_TAG}-inc"
        echo "::set-env name=DK_DOCKERFILE::Dockerfiles/${DK_DOCKERFILE}"

        UPDATE_FEEDS=0
        [ "x${{ github.event.client_payload.update_feeds || github.event.deployment.payload.update_feeds }}" != "xtrue" ] || UPDATE_FEEDS=1
        echo "::set-env name=UPDATE_FEEDS::${UPDATE_FEEDS}"

        scripts/cleanup.sh

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        . docker.sh
        configure_docker
        login_to_registry
        touch .start_timestamp

    - name: Check if using latest base builder
      env:
        BOOL_USE_LATEST: ${{ github.event.client_payload.use_latest || github.event.deployment.payload.use_latest }}
        BOOL_USE_LATEST_INC: ${{ github.event.client_payload.use_latest_inc || github.event.deployment.payload.use_latest_inc }}
      run: |
        . docker.sh
        # temporarily disable failure guarder
        set +eo pipefail
        docker buildx imagetools inspect "${IMAGE_BASE}"
        ret_val=$?
        set -eo pipefail
        if [ "x${BOOL_USE_LATEST}" = "xtrue" -o "x${BOOL_USE_LATEST_INC}" = "xtrue" -o "x${ret_val}" != "x0" ]; then
          IMAGE_SELECTED="${IMAGE_LATEST}"
          if [ "x${BOOL_USE_LATEST_INC}" = "xtrue" ]; then
            if [ "x${BOOL_USE_LATEST}" = "xtrue" ]; then
              echo "::error::You cannot use both 'use_latest' and 'use_latest_inc'" >&2
              exit 1
            fi
            IMAGE_SELECTED="${IMAGE_LATEST_INC}"
          fi
          echo "Creating incremental builder '${IMAGE_BASE}' from '${IMAGE_SELECTED}'"

          set +eo pipefail
          docker buildx imagetools inspect "${IMAGE_SELECTED}"
          ret_val=$?
          set -eo pipefail
          if [ "x${ret_val}" != "x0" ]; then
            echo "::error::Base/incremental builder '${IMAGE_SELECTED}' does not exist, please run 'docker-build' job" >&2
            exit 1
          fi

          create_remote_tag_alias "${IMAGE_SELECTED}" "${IMAGE_BASE}"
        fi

    - name: Download last incremental builder
      run: |
        . docker.sh
        pull_image

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection
      if: github.event.client_payload.debug == true || github.event.deployment.payload.debug == true
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    - name: Update repo and packages
      run: |
        . docker.sh
        build_image updateclone
        echo "::set-env name=STATE_LAST_BUILD_STAGE::updateclone"

    - name: Apply customizations
      run: |
        . docker.sh
        build_image custom
        echo "::set-env name=STATE_LAST_BUILD_STAGE::custom"

    - name: Download packages
      run: |
        . docker.sh
        build_image download
        echo "::set-env name=STATE_LAST_BUILD_STAGE::download"

    - name: Print disk space
      run: df -h

    - name: Compile packages
      run: |
        . docker.sh
        build_image compile
        echo "::set-env name=STATE_LAST_BUILD_STAGE::compile"

    - name: Print disk space
      run: df -h

    - name: Upload current builder
      if: (!cancelled()) && (success() || github.event.client_payload.push_when_fail == true || github.event.deployment.payload.push_when_fail == true)
      run: |
        . docker.sh
        push_image_and_cache

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    - name: Filter out firmware files
      id: organize_1
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      run: |
        shopt -s extglob
        cd openwrt/bin/targets/*/*
        all_extra_files=( !(packages) )
        rm -rf "${all_extra_files[@]}"
        echo "::set-output name=status::success"

    - name: Upload packages
      uses: actions/upload-artifact@master
      if: steps.organize_1.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_packages
        path: openwrt/bin

    - name: Filter out old packages
      id: organize_2
      if: steps.organize_1.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        find . -type f -not -newer ../../../../../.start_timestamp -exec rm -f {} \;
        echo "::set-output name=status::success"

    - name: Upload new packages
      uses: actions/upload-artifact@master
      if: steps.organize_2.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_new_packages
        path: openwrt/bin

    # failure checking
    - name: Failed/debug set, wait for SSH connection ( you are safe to cancel the job now )
      if: failure() || github.event.client_payload.debug == true || github.event.deployment.payload.debug == true
      uses: tete1030/debugger-action@my

  direct-build:
    runs-on: ubuntu-18.04
    if: (
        github.event_name == 'repository_dispatch' &&
        github.event.action == 'direct-build'
      ) || (
        github.event_name == 'deployment' &&
        github.event.deployment.task == 'direct-build'
      )
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialize environment
      run: |
        scripts/cleanup.sh
        scripts/initenv.sh

    - name: Clone all source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run:
        scripts/update_repo.sh
        UPDATE_FEEDS=1 scripts/update_feeds.sh

    - name: Load custom configuration
      run: scripts/customize.sh

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection
      if: github.event.client_payload.debug == true || github.event.deployment.payload.debug == true
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    - name: Download packages
      run: scripts/download.sh

    - name: Print disk space
      run: df -h

    - name: Multi-thread compile
      id: mtcompile
      continue-on-error: true
      run: |
        echo "::set-output name=started::yes"
        scripts/compile.sh m
        echo "::set-output name=success::yes"

    # previous failure will cause current job failure
    - name: Single-thread compile
      if: steps.mtcompile.outputs.started == 'yes' && steps.mtcompile.outputs.success != 'yes'
      run: scripts/compile.sh s

    - name: Print disk space
      run: df -h

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: (!cancelled())
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: (!cancelled())
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    - name: Failed/debug set, wait for SSH connection ( you are safe to cancel the job now )
      if: failure() || github.event.client_payload.debug == true || github.event.deployment.payload.debug == true
      uses: tete1030/debugger-action@my
