#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on:
  release:
    types: [published]
  repository_dispatch:
    types: [docker, direct, docker-inc]
  push:
    paths-ignore:
    - README.md
    - LICENSE

#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: [started]

env:
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}

jobs:
  docker-build:
    runs-on: ubuntu-18.04
    if: github.event_name == 'release' || (github.event_name == 'repository_dispatch' && github.event.action == 'docker')
    env:
      USERNAME: ${{secrets.docker_username}}
      PASSWORD: ${{secrets.docker_password}}
      IMAGE_NAME: ${{secrets.docker_username}}/openwrt_x86_64
      IMAGE_TAG: latest
      CONTEXT: ./
      DOCKERFILE: Dockerfile
      PULL_STAGES_LOG: pull-stages-output.log
      BUILD_LOG: build-output.log
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      CONFIG_FILE: 'config.diff'
      BUILD_ARGS: 'REPO_URL REPO_BRANCH CONFIG_FILE'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Configure docker
      run: |
        . docker.sh
        configure_docker

    - name: Pull docker cache
      run: |
        . docker.sh
        login_to_registry
        pull_cached_stages

    - name: Initialize environment
      run: |
        scripts/cleanup.sh
        . docker.sh
        build_image init-env

    - name: Clone all source code
      run: |
        . docker.sh
        build_image clone

    - name: Load custom configuration
      run: |
        . docker.sh
        build_image custom

    - name: SSH connection to Actions
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true
      uses: tete1030/debugger-action@my

    - name: Download package
      run: |
        . docker.sh
        build_image download

    - name: Multi-thread compile
      id: mtcompile
      continue-on-error: true
      run: |
        . docker.sh
        retVal=$?
        if [ $retVal -eq 0 ]; then
          build_image multithread-compile
          retVal=$?
        fi
        if [ $retVal -eq 0 ]; then
          echo "::set-output name=status::success"
        else
          echo "::set-output name=status::fail"
        fi
        exit $retVal

    # if: failure() is not accurate, because the failure may come from any previous step
    - name: Single-thread compile
      if: steps.mtcompile.outputs.status == 'fail'
      run: |
        . docker.sh
        build_image singlethread-compile

    - name: Push docker cache
      if: always()
      run: |
        . docker.sh
        push_image_and_stages

    - name: Mount built files
      if: always()
      run: |
        . docker.sh
        mount_container "$(pwd)/openwrt" /home/builder/openwrt

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      if: always()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"

    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: SSH connection to Actions
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true
      uses: tete1030/debugger-action@my

  # build:
  #   runs-on: ubuntu-18.04

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@master

  #   - name: Initialize environment
  #     run: |
  #       scripts/cleanup.sh
  #       scripts/initenv.sh

  #   - name: Clone all source code
  #     env: 
  #       REPO_URL: https://github.com/coolsnowwolf/lede
  #       REPO_BRANCH: master
  #     run: scripts/clone.sh

  #   - name: Load custom configuration
  #     env:
  #       CONFIG_FILE: 'config.diff'
  #     run: scripts/customize.sh

  #   # - name: SSH connection to Actions
  #   #   uses: P3TERX/debugger-action@master

  #   - name: Download package
  #     run: scripts/download.sh

  #   - name: Multi-thread compile
  #     run: scripts/mt_compile.sh

  #   - name: Single-thread compile
  #     if: failure()
  #     run: scripts/st_compile.sh

  #   - name: Upload bin directory
  #     uses: actions/upload-artifact@master
  #     if: always()
  #     with:
  #       name: OpenWrt_bin
  #       path: openwrt/bin

  #   - name: Organize files
  #     if: always()
  #     run: |
  #       cd openwrt/bin/targets/*/*
  #       rm -rf packages
  #       echo "::set-env name=FIRMWARE::$(pwd)"

  #   - name: Upload firmware
  #     uses: actions/upload-artifact@master
  #     if: always()
  #     with:
  #       name: OpenWrt_firmware
  #       path: ${{ env.FIRMWARE }}

# Base
# * +mentohust
# * -shadowsocksr
# * -unblockmusic
# * -v2ray
# * -samba +samba4
# * -adbyby
# * -xlnetacc
# * -mia
# * -wifi_schedule
# * -kms
# * -zerotier
# * +dockerce
# * +curl
# * +wget

# Install
# * autossh
# * openclash
# * fping
# * netdata
# * zsh
# * tcpdump
# * dmesg
# * tmux
# * vim-full
# * strace
# * htop

# Change source
# * Upgrade download_pl
# * Add mentohust
# * autossh.init
# * transmission init.d
# * netdata init.d upgrade
# * netdata makefile upgrade for 1.19
# * Add libJudy for netdata
# * netdata add go.d.plugin
# * openclash replace clashr
# 
