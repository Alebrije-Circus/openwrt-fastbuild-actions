#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on:
  release:
    types: [published]
  repository_dispatch:
    types: [docker, direct, docker-inc]
  push:
    paths-ignore:
    - README.md
    - LICENSE

#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: [started]

env:
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}

jobs:
  docker-build:
    runs-on: ubuntu-18.04
    if: github.event_name == 'release' || (github.event_name == 'repository_dispatch' && github.event.action == 'docker')
    env:
      USERNAME: ${{secrets.docker_username}}
      PASSWORD: ${{secrets.docker_password}}
      IMAGE_NAME: ${{secrets.docker_username}}/openwrt_x86_64
      IMAGE_TAG: latest
      CONTEXT: ./
      DOCKERFILE: Dockerfile
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      CONFIG_FILE: 'config.diff'
      BUILD_ARGS: 'REPO_URL REPO_BRANCH CONFIG_FILE'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        scripts/cleanup.sh
        . docker.sh
        configure_docker
        login_to_registry

    - name: Initialize environment
      run: |
        . docker.sh
        build_image init-env

    - name: Clone all source code
      run: |
        . docker.sh
        build_image clone

    - name: Load custom configuration
      run: |
        . docker.sh
        build_image custom

    # Allow intermediate customization
    - name: SSH connection to Actions
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    - name: Download package
      run: |
        . docker.sh
        build_image download

    - name: Multi-thread compile
      id: mtcompile
      run: |
        echo "::set-output name=started::yes"
        . docker.sh
        build_image multithread-compile

    # if: failure() alone is not accurate but still necessary.
    #     The failure may come from any previous step.
    #     However, without failure(), the `if:` statement would combine success() implicitly
    - name: Single-thread compile
      if: failure() && steps.mtcompile.outputs.started == 'yes'
      run: |
        . docker.sh
        build_image singlethread-compile

    - name: Push docker cache
      if: (!cancelled()) && !(failure() && github.event_name == 'repository_dispatch' && github.event.client_payload.disable_push_when_fail == true)
      run: |
        . docker.sh
        push_image

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"

    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.copydir.outputs.status == 'success' && success() && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    # TODO: NOT ACTUALLY WORKING AS FAILURE STATUS NOT PASSING THROUGH TO HERE;
    #       LAST FAILURE STATUS SHOULD ALSO PASS THROUGH THIS STEP
    - name: SSH connection to Actions
      if: failure() || (github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true)
      uses: tete1030/debugger-action@my

  docker-build-inc:
    runs-on: ubuntu-18.04
    if: github.event_name == 'push' || (github.event_name == 'repository_dispatch' && github.event.action == 'docker-inc')
    env:
      USERNAME: ${{secrets.docker_username}}
      PASSWORD: ${{secrets.docker_password}}
      IMAGE_NAME: ${{secrets.docker_username}}/openwrt_x86_64
      IMAGE_TAG: latest
      CONTEXT: ./
      DOCKERFILE: Dockerfile-inc
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      CONFIG_FILE: 'config.diff'
      BUILD_WHOLE: ${{ github.event.client_payload.build_whole || false }}
      NO_REMOTE_CACHE: 1
      INLINE_CACHE: 1
      NO_PUSH: 1
      BUILD_ARGS: 'CONFIG_FILE IMAGE_BASE BUILD_WHOLE'

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        scripts/cleanup.sh
        . docker.sh
        configure_docker
        login_to_registry
        echo "::set-env name=IMAGE_BASE::$(_get_full_image_name):${IMAGE_TAG}"

    - name: Apply customizations
      run: |
        . docker.sh
        build_image applycustom

    # Allow intermediate customization
    - name: SSH connection to Actions
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    # Allow intermediate customization
    - name: Multi-thread compile
      id: mtcompile
      run: |
        echo "::set-output name=started::yes"
        . docker.sh
        build_image multithread-compile

    # if: failure() alone is not accurate but still necessary.
    #     The failure may come from any previous step.
    #     However, without failure(), the `if:` statement would combine success() implicitly
    - name: Single-thread compile
      if: failure() && steps.mtcompile.outputs.started == 'yes'
      run: |
        . docker.sh
        build_image singlethread-compile

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      if: steps.copydir.outputs.status == 'success' && !cancelled() && github.event_name == 'repository_dispatch' && github.event.client_payload.build_whole == true
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
  
    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.copydir.outputs.status == 'success' && success() && !cancelled() && github.event_name == 'repository_dispatch' && github.event.client_payload.build_whole == true
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    # TODO: NOT ACTUALLY WORKING AS FAILURE STATUS NOT PASSING THROUGH TO HERE;
    #       LAST FAILURE STATUS SHOULD ALSO PASS THROUGH THIS STEP
    - name: SSH connection to Actions
      if: failure() || (github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true)
      uses: tete1030/debugger-action@my

  direct-build:
    runs-on: ubuntu-18.04
    if: github.event_name == 'repository_dispatch' && github.event.action == 'direct'
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialize environment
      run: |
        scripts/cleanup.sh
        scripts/initenv.sh

    - name: Clone all source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: scripts/clone.sh

    - name: Load custom configuration
      env:
        CONFIG_FILE: 'config.diff'
      run: scripts/customize.sh

    # Allow intermediate customization
    - name: SSH connection to Actions
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true
      env:
        TIMEOUT_MIN: 5
      uses: tete1030/debugger-action@my

    - name: Download package
      run: scripts/download.sh

    - name: Multi-thread compile
      id: mtcompile
      run: |
        echo "::set-output name=started::yes"
        scripts/mtcompile.sh

    # if: failure() alone is not accurate but still necessary.
    #     The failure may come from any previous step.
    #     However, without failure(), the `if:` statement would combine success() implicitly
    - name: Single-thread compile
      if: failure() && steps.mtcompile.outputs.started == 'yes'
      run: scripts/st_compile.sh

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: (!cancelled())
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      if: (!cancelled())
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"

    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: (success() && !cancelled())
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    # failure checking
    # TODO: NOT ACTUALLY WORKING AS FAILURE STATUS NOT PASSING THROUGH TO HERE;
    #       LAST FAILURE STATUS SHOULD ALSO PASS THROUGH THIS STEP)
    - name: SSH connection to Actions
      if: failure() || (github.event_name == 'repository_dispatch' && github.event.client_payload.debug == true)
      uses: tete1030/debugger-action@my

# Base
# * +mentohust
# * -shadowsocksr
# * -unblockmusic
# * -v2ray
# * -samba +samba4
# * -adbyby
# * -xlnetacc
# * -mia
# * -wifi_schedule
# * -kms
# * -zerotier
# * +dockerce
# * +curl
# * +wget

# Install
# * autossh
# * openclash
# * fping
# * netdata
# * zsh
# * tcpdump
# * dmesg
# * tmux
# * vim-full
# * strace
# * htop

# Change source
# * Upgrade download_pl
# * Add mentohust
# * autossh.init
# * transmission init.d
# * netdata init.d upgrade
# * netdata makefile upgrade for 1.19
# * Add libJudy for netdata
# * netdata add go.d.plugin
# * openclash replace clashr
# 
