#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX (for build-direct job)
# Blog: https://p3terx.com
#=================================================

#=================================================
# https://github.com/tete1030/openwrt-fastbuild-actions
# Description: FAST building OpenWrt with Github Actions and Docker!
# Lisence: MIT
# Author: Texot (for docker-* jobs)
#=================================================

# If you want to tweak the options, please be sure you understand them.
# 如果你想更改参数，确保在理解它们的前提下进行
env:
  # Specify here the name and tag you want to use for the builders, they will be used for your docker hub repository
  # For BUILDER_NAME: due to docker's limitation, only allowing lowercase letters, digits and separators (period, underscores, dashes)
  # For BUILDER_TAG: lowercase and uppercase letters, digits, underscores, periods and dashes
  # 在这里自定义你想使用的Builder名和默认Tag，这将被用作Docker Hub仓库的名字和Tag
  # 对于BUILDER_NAME，由于docker的限制，仅能使用小写字母、数字和分隔符（英文句号，下划线，横杠）
  # 对于BUILDER_TAG，能使用大小写字母、数字和分隔符
  BUILDER_NAME: openwrt_dev
  BUILDER_TAG: latest
  # Specify here the OpenWrt Repo URL and Branch
  # 在这里指定你的OpenWrt的Repo URL和Branch
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  # REPO_URL: https://github.com/openwrt/openwrt
  # REPO_BRANCH: openwrt-19.07
  # Specify here your config file
  # 在这里指定你的配置文件名
  CONFIG_FILE: 'user/config.diff'
  # DO NOT CHANGE the following here, set them only in forked repo's Settings->Secrets page
  # You don't need to set docker_registry if you are using the default Docker Hub
  # 安全起见以下参数请不要在此更改，在你Fork的repo中，Settings->Secrets页面更改
  # 如果你想使用默认的Docker Hub，你不需要在secrets页面设置docker_registry
  DK_REGISTRY: ${{secrets.docker_registry}}
  DK_USERNAME: ${{secrets.docker_username}}
  DK_PASSWORD: ${{secrets.docker_password}}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
  TMATE_ENCRYPT_PASSWORD: ${{secrets.TMATE_ENCRYPT_PASSWORD}}

name: Build OpenWrt

on:
  deployment:
  repository_dispatch:
  push:
    paths:
    - '.github/workflows/build-openwrt.yml'
    - 'Dockerfiles/**'
    - 'scripts/**'
    - 'user/**'
  ## If you want to use 'watch', 'schedule' events, make sure you also have changed the jobs' `if` condition.
  ## For 'schedule', see examples in: https://crontab.guru/examples.html
  ##     e.g. every sunday midnight: '0 0 * * 0' every midnight: '0 0 * * *'
  # schedule:
  #   - cron: '0 0 * * 0'
  # watch:
  #   types: [started]

jobs:
  context:
    name: Print runner context (for debugging)
    runs-on: ubuntu-18.04
    steps:
    - name: Dump github context
      run: |
        cat << 'EOF'
        ${{toJSON(github)}}
        EOF

  build:
    runs-on: ubuntu-18.04
    # Always activate this job
    # * You can change Line 3 to the following one to only build when push with '#build#'
    #     && contains(github.event.head_commit.message, '#build#')
    # * To build on schedule event, add OR condition:
    #     github.event_name == 'schedule'
    # * To build when YOU stars YOUR OWN project, add OR condition:
    #     github.event_name == 'watch' && github.event.action == 'started' && github.event.repository.owner.id == github.event.sender.id
    # For `github.event` structures, see: https://developer.github.com/v3/activity/events/types/
    if: |
      (
        github.event_name == 'push'
      ) || (
        github.event_name == 'repository_dispatch'
        && github.event.action == 'build'
      ) || (
        github.event_name == 'deployment'
        && github.event.deployment.task == 'build'
      )
    name: ${{matrix.title}}
    strategy:
      fail-fast: true
      matrix:
        mode: [normal, test]
        include:
        - mode: normal
          title: build
        - mode: test
          title: Fast checking

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Init build env
      env:
        GITHUB_CONTEXT: ${{toJSON(github)}}
        MATRIX_CONTEXT: ${{toJSON(matrix)}}
        BUILD_OPTS: 'update_feeds update_repo rebase rebuild debug push_when_fail package_only'
      run: |
        . scripts/host/init_runner.sh
        [ "x${TEST}" = "x1" ] || scripts/host/cleanup.sh

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Configure docker
      run: |
        . scripts/host/docker.sh
        configure_docker
        login_to_registry

    - name: Check status of builders
      run: |
        . scripts/host/docker.sh
        if [ "x${OPT_REBUILD}" != "x1" ]; then
          # temporarily disable failure guarder
          set +eo pipefail
            docker buildx imagetools inspect "${BUILDER_ID_INC}" 2>&1 >/dev/null
            builder_inc_ret_val=$?
          set -eo pipefail

          if [ "x${OPT_REBASE}" = "x1" -o "x${builder_inc_ret_val}" != "x0" ]; then
            set +eo pipefail
              docker buildx imagetools inspect "${BUILDER_ID_BASE}" 2>&1 >/dev/null
              builder_base_ret_val=$?
            set -eo pipefail
            if [ "x${builder_base_ret_val}" != "x0" ]; then
              echo "Base builder '${BUILDER_ID_BASE}' does not exist, creating one"
              OPT_REBUILD=1
            else
              echo "Creating incremental builder '${BUILDER_ID_INC}' from base builder '${BUILDER_ID_BASE}'"
              create_remote_tag_alias "${BUILDER_ID_BASE}" "${BUILDER_ID_INC}"
            fi
          fi
        fi

        if [ "x${OPT_REBUILD}" = "x1" ]; then
          echo "Re-creating base builder '${BUILDER_ID_BASE}'"
          echo "::set-env name=DK_DOCKERFILE::${DOCKERFILE_BASE}"
        fi
        echo "::set-env name=OPT_REBUILD::${OPT_REBUILD}"

    - name: Download last incremental builder
      if: env.OPT_REBUILD == '0'
      run: |
        . scripts/host/docker.sh
        pull_image

    - name: Initialize environment for base builder
      if: env.OPT_REBUILD == '1'
      run: |
        . scripts/host/docker.sh
        build_image init-env

    - name: Clone/update source codes
      run: |
        . scripts/host/docker.sh
        build_image clone

    # Allow intermediate customization
    - name: Debug set, wait for SSH connection (timeout 5min)
      if: env.OPT_DEBUG == '1'
      env:
        TIMEOUT_MIN: 5
        TMATE_DOCKER_IMAGE: ${{env.DK_LAST_BUILD_TARGET}}
      uses: tete1030/debugger-action@dev

    - name: Apply customizations
      run: |
        . scripts/host/docker.sh
        build_image custom

    - name: Download packages
      run: |
        . scripts/host/docker.sh
        build_image download

    - name: Print disk space
      run: df -h

    - name: Compile firmware and packages
      run: |
        . scripts/host/docker.sh
        build_image compile

    - name: Print disk space
      run: df -h

    - name: Upload current builder
      if: |
        !cancelled() && (
          success()
          || env.OPT_PUSH_WHEN_FAIL == '1'
        )
      run: |
        . scripts/host/docker.sh
        push_image_and_cache
        if [ "x${OPT_REBUILD}" = "x1" ]; then
          create_remote_tag_alias "${BUILDER_ID_INC}" "${BUILDER_ID_BASE}"
        fi

    - name: Copy out bin directory
      id: copydir
      if: (!cancelled())
      run: |
        . scripts/host/docker.sh
        if [ ! -d "$(pwd)/openwrt" ]; then
          mkdir "$(pwd)/openwrt"
        fi
        copy_files /home/builder/openwrt/bin "$(pwd)/openwrt/bin"
        echo "::set-output name=status::success"

    # - name: Upload bin directory
    #   uses: actions/upload-artifact@master
    #   if: steps.copydir.outputs.status == 'success' && !cancelled()
    #   with:
    #     name: OpenWrt_bin
    #     path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.copydir.outputs.status == 'success' && !cancelled()
      run: |
        shopt -s extglob
        mkdir "$(pwd)/openwrt/firmware"
        cd openwrt/bin/targets/*/*
        all_firmware_files=( !(packages) )
        mv "${all_firmware_files[@]}" ../../../../firmware/
        echo "::set-output name=status::success"
  
    - name: Upload firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: openwrt/firmware

    - name: Upload packages
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_packages
        path: openwrt/bin

    # failure checking
    - name: Failed/debug set, wait for SSH connection (timeout 30min. You are safe to cancel the job now.)
      if: |
        failure()
        || env.OPT_DEBUG == '1'
      env:
        TMATE_DOCKER_IMAGE: ${{env.DK_LAST_BUILD_TARGET}}
      uses: tete1030/debugger-action@dev
    
    - name: Upload debugging changes
      if: |
        (failure() && env.OPT_PUSH_WHEN_FAIL == '1')
        || env.OPT_DEBUG == '1'
      run: |
        . scripts/host/docker.sh
        docker tag "${DK_LAST_BUILD_TARGET}" "$(_get_full_image_name_tag_for_build)"
        push_image_and_cache
